/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Mail (AppleScript)
 #	author : miyako
 #	4/26/18
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "Mail.h"

#pragma mark JSON

void json_stringify(JSONNODE *json, C_TEXT &t)
{
	//json_char *json_string = json_write_formatted(json);
	json_char *json_string = json_write(json);
	std::wstring wstr = std::wstring(json_string);
	
#if VERSIONWIN
	t.setUTF16String((const PA_Unichar *)wstr.c_str(), (uint32_t)wstr.length());
#else
	uint32_t dataSize = (uint32_t)((wstr.length() * sizeof(wchar_t))+ sizeof(PA_Unichar));
	std::vector<char> buf(dataSize);
	uint32_t len = PA_ConvertCharsetToCharset((char *)wstr.c_str(),
																						(PA_long32)(wstr.length() * sizeof(wchar_t)),
																						eVTC_UTF_32,
																						(char *)&buf[0],
																						dataSize,
																						eVTC_UTF_16);
	t.setUTF16String((const PA_Unichar *)&buf[0], len);
#endif
	json_free(json_string);
}

void json_set_s(JSONNODE *n, NSString *value)
{
	if(n)
	{
		C_TEXT t;
		
		if(value)
			t.setUTF16String(value);
		
		std::wstring u32;
		
		uint32_t dataSize = (t.getUTF16Length() * sizeof(wchar_t))+ sizeof(wchar_t);
		std::vector<char> buf(dataSize);
		
		PA_ConvertCharsetToCharset((char *)t.getUTF16StringPtr(),
															 t.getUTF16Length() * sizeof(PA_Unichar),
															 eVTC_UTF_16,
															 (char *)&buf[0],
															 dataSize,
															 eVTC_UTF_32);
		
		u32 = std::wstring((wchar_t *)&buf[0]);

		JSONNODE *s = json_new(JSON_NODE);
		
		json_set_a(s, u32.c_str());
	
		json_push_back(n, s);
	}
}

void json_set_i(JSONNODE *n, NSNumber *value)
{
	if(n)
	{
		JSONNODE *i = json_new(JSON_NODE);
		
		json_set_i(i, [value intValue]);
		
		json_push_back(n, i);
	}
}
void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Mail

		case 1 :
			Mail_Get_selection(pResult, pParams);
			break;

	}
}

// ------------------------------------- Mail -------------------------------------


void Mail_Get_selection(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT returnValue;
	
	JSONNODE *json = json_new(JSON_ARRAY);
	
	Param1.fromParamAtIndex(pParams, 1);
	
	mailApplication *application = [SBApplication applicationWithBundleIdentifier:@"com.apple.mail"];
	
	SBElementArray *selection = [application selection];
	
	switch (Param1.getIntValue()) {
  case 1:
		{
			NSArray *identifiers = [selection valueForKey:@"id"];
			for (id identifier in identifiers) {
				json_set_i(json, identifier);
			}
		}
			break;
			
  default:
		{
			NSArray *sources = [selection arrayByApplyingSelector:@selector(source)];
			for (id source in sources) {
				json_set_s(json, (NSString *)source);
			}
		}
			break;
	}
	
	json_stringify(json, returnValue);
	json_delete(json);
	
	returnValue.setReturn(pResult);
}

